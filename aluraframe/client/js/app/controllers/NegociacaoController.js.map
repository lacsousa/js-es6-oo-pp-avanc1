{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["NegociacaoController","_ordemAtual","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_listaNegociacoes","Bind","ListaNegociacoes","NegociacoesView","_mensagem","Mensagem","MensagemView","_service","NegociacaoService","_init","lista","then","negociacoes","forEach","adiciona","negociacao","catch","texto","erro","setInterval","importaNegociacoes","event","preventDefault","_criaNegociacao","cadastra","mensagem","_limpaFormulario","importa","console","log","value","focus","Negociacao","DateHelper","textoParaData","parseInt","parseFloat","apaga","esvazia","coluna","inverteOrdem","ordena","a","b"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["class NegociacaoController {\r\n\r\n    constructor() {\r\n\r\n        this._ordemAtual = ''; // quando a página for carregada, não tem critério. Só passa a ter quando ele começa a clicar nas colunas\r\n\r\n        let $ = document.querySelector.bind(document);\r\n        // Forma de implementar um micro Framework\r\n        // Como no jQuery\r\n        this._inputData = $('#data');\r\n        this._inputQuantidade = $('#quantidade');\r\n        this._inputValor = $('#valor');\r\n\r\n        /* Começar a trabalhar com o Proxy\r\n        this._listaNegociacoes = new ListaNegociacoes(model => {\r\n            console.log(this); // Quando trocamos o function pelo arrow function (AF)=>\r\n                                // Ele mantém o this. Pq numa AF o o escopo de this \r\n                                // é léxico, em vez de ser dinâmico como a outra função\r\n            this._negociacoesView.update(model);\r\n        });   */\r\n\r\n        this._listaNegociacoes = new Bind(\r\n            new ListaNegociacoes(),\r\n            new NegociacoesView($('#negociacoesView')),\r\n            'adiciona', 'esvazia', 'ordena', 'inverteOrdem');\r\n\r\n        // primeiro update\r\n        // Retirado no Cap. 3.3. ----->   this._negociacoesView.update(this._listaNegociacoes);\r\n        // a estratégia de mudar de let ( variáveis) para o this\r\n        // reduz o acesso ao DOM a apenas 1 vez, mesmo que ocorram \r\n        // 5000 negociações  \r\n\r\n        this._mensagem = new Bind(\r\n            new Mensagem(),\r\n            new MensagemView($('#mensagemView')),\r\n            'texto');\r\n\r\n        this._service = new NegociacaoService();\r\n        this._init();    \r\n\r\n    }\r\n\r\n    _init(){\r\n\r\n        this._service\r\n        .lista()\r\n        .then(negociacoes =>\r\n            negociacoes.forEach(negociacao =>\r\n                this._listaNegociacoes.adiciona(negociacao)))\r\n        .catch(erro => this._mensagem.texto = erro);        \r\n\r\n\r\n        setInterval(() => {\r\n            this.importaNegociacoes();\r\n        }, 4000);\r\n    }\r\n\r\n    adiciona(event) {\r\n        event.preventDefault();\r\n        \r\n        let negociacao = this._criaNegociacao();\r\n\r\n        new NegociacaoService()\r\n            .cadastra(negociacao)\r\n            .then( mensagem => {\r\n                    this._listaNegociacoes.adiciona(negociacao);\r\n                    this._mensagem.texto = mensagem;\r\n                    this._limpaFormulario();\r\n                    })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n    }\r\n    \r\n    //let data = DateHelper.textoParaData(this._inputData.value);\r\n\r\n    /*\r\n            split('-')\r\n                // Arrow function \r\n                // Vc retira o function e se vc só tiver 1 linha no bloco\r\n                // vc pode reduzir mais ainda \r\n                .map((item, indice) => item - indice % 2 ));\r\n            // Tudo isso. porque o mês nesse Date\r\n            // inicia com 0 ( Janeiro )\r\n            console.log(data);\r\n    */\r\n    // let negociacao = new Negociacao(data,\r\n    // this._inputQuantidade.value, this._inputValor.value);\r\n\r\n    // Cap.04.06 \r\n    // this._listaNegociacoes.negociacoes.length = 0;\r\n    // this._listaNegociacoes.negociacoes.push(this._criaNegociacao);\r\n\r\n    // Depois de criada a armadilha vamos comentar o update aqui\r\n    // this._negociacoesView.update(this._listaNegociacoes);\r\n\r\n    // this._mensagem.texto = \"Negociação adiconada com sucesso!\";\r\n    // this._limpaFormulario();\r\n    // console.log(this._listaNegociacoes.negociacoes);\r\n    // console.log(DateHelper.dataParaTexto(negociacao.data));\r\n\r\n    /*\r\n        .map( (item, indice) function {\r\n            return item - indice % 2;\r\n        }));\r\n    */\r\n\r\n    importaNegociacoes() {\r\n        // Trabalhando com o Promise\r\n        this._service\r\n            .importa(this._listaNegociacoes.negociacoes)\r\n            //Se vc tivesse colocado um Bloco { } vc teria que explicitar um \"return\" \r\n            // para os dados irem para o bloco abaixo\r\n            .then(negociacoes => {\r\n                negociacoes\r\n                    // .reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])\r\n                    .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n                this._mensagem.texto = 'Negociações importadas com sucesso';\r\n                console.log(negociacoes);\r\n            }).catch(erro => this._mensagem.texto = erro);\r\n\r\n        /* 2a. REFATORAÇÃO acima\r\n        service.obterNegociacoesDaSemana()\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n                this._mensagem.texto = 'Negociações da semana obtidas com sucesso!';\r\n            })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n\r\n        service.obterNegociacoesDaSemanaAnterior()\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n                this._mensagem.texto = 'Negociações da semana obtidas com sucesso!';\r\n            })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n\r\n        service.obterNegociacoesDaSemanaRetrasada()\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n                this._mensagem.texto = 'Negociações da semana obtidas com sucesso!';\r\n            })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n        */\r\n\r\n        /* \r\n        //Error-First-Callback\r\n        service.obterNegociacoesDaSemana((erro, negociacoes) => {\r\n            if(erro){\r\n                this._mensagem.texto = erro;\r\n                return;\r\n            }\r\n            negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n\r\n            service.obterNegociacoesDaSemanaAnterior((erro, negociacoes) => {\r\n                if(erro){\r\n                    this._mensagem.texto = erro;\r\n                    return;\r\n                }\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n\r\n                service.obterNegociacoesDaSemanaRetrasada((erro, negociacoes) => {\r\n                    if(erro){\r\n                        this._mensagem.texto = erro;\r\n                        return;\r\n                    }\r\n                    negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n                    this._mensagem.texto = 'Negociações Semana importadas com sucesso!';\r\n                });\r\n            });\r\n        });\r\n        */\r\n    }\r\n\r\n    _limpaFormulario() {\r\n        this._inputData.value = '';\r\n        this._inputQuantidade.value = 1;\r\n        this._inputValor.value = 0.0;\r\n\r\n        this._inputData.focus();\r\n    }\r\n\r\n    _criaNegociacao() {\r\n        return new Negociacao(\r\n            DateHelper.textoParaData(this._inputData.value),\r\n            parseInt(this._inputQuantidade.value),\r\n            parseFloat(this._inputValor.value));\r\n    }\r\n\r\n    apaga() {\r\n\r\n        this._service\r\n            .apaga()\r\n            .then(mensagem => {\r\n                this._listaNegociacoes.esvazia();\r\n                //    this._negociacoesView.update(this._listaNegociacoes);\r\n                this._mensagem.texto = mensagem;\r\n            });\r\n\r\n        \r\n    }\r\n\r\n    ordena(coluna) {\r\n        if (this._ordemAtual == coluna) {\r\n            this._listaNegociacoes.inverteOrdem();\r\n        } else {\r\n            this._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);\r\n        }\r\n        this._ordemAtual = coluna;\r\n    }\r\n}"]}