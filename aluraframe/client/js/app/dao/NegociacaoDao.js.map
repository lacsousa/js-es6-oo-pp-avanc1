{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","console","log","onerror","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAwB;AAAA;;AACpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAY;AAAA;;AACjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB,aAAK;AACrBC,4BAAQC,GAAR,CAAY,iCAAZ;AACAR;AACH,iBAHD;;AAKAE,wBAAQO,OAAR,GAAkB,aAAK;AACnBF,4BAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,uCAAP;AACH,iBAHD;AAIH,aAhBM,CAAP;AAiBH;;;qCAEY;AAAA;;AACT,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,aAAD,CADJ,EACqB,WADrB,EAERC,WAFQ,CAEI,aAFJ,EAGRU,UAHQ,EAAb;;AAKA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,aAAK;AACpB,wBAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB,CADoB,CACS;;AAE7B,wBAAID,KAAJ,EAAW;AACP,4BAAIE,OAAOF,MAAMG,KAAjB;AACA;AACAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACA;AACAR,8BAAMS,QAAN;AACH,qBAND,MAMO;AACH;AACA;AACAzB,gCAAQe,WAAR;AACH;AACJ,iBAdD;;AAgBAF,uBAAOJ,OAAP,GAAiB,aAAK;AAClBF,4BAAQC,GAAR,CAAY,WAAWE,EAAEC,MAAF,CAASC,KAAT,CAAec,IAAtC;AACAzB,2BAAO,+CAAP;AACH,iBAHD;AAIH,aA7BM,CAAP;AA8BH;;;qCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,aAAD,CADH,EACoB,WADpB,EAETC,WAFS,CAEG,aAFH,EAGTuB,KAHS,EAAd;;AAKIzB,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,QAAQ,oCAAR,CAAL;AAAA,iBAApB;;AAEAE,wBAAQO,OAAR,GAAkB,aAAK;AACnBF,4BAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,yCAAP;AACH,iBAHD;AAKP,aAbM,CAAP;AAcH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            request.onsuccess = e => {\r\n                console.log('Negociação incluída com sucesso');\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível incluir a negociação');\r\n            };\r\n        });\r\n    }\r\n\r\n    listaTodos() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let cursor = this._connection\r\n                .transaction(['negociacoes'], 'readwrite')\r\n                .objectStore('negociacoes')\r\n                .openCursor();\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = e => {\r\n                let atual = e.target.result; // aponta para o 1o. objeto\r\n\r\n                if (atual) {\r\n                    let dado = atual.value;\r\n                    // O dado é um JSon e precisa ser convertido numa negociação\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n                    // o continue() chama novamente o cursor.onsuccess\r\n                    atual.continue();\r\n                } else {\r\n                    //Percorre topdas as negociações adicionando no array negociacoes\r\n                    // e quando terminar ele entra no else\r\n                    resolve(negociacoes);\r\n                }\r\n            };\r\n\r\n            cursor.onerror = e => {\r\n                console.log('Error:' + e.target.error.name);\r\n                reject('Não foi possível listar todas as negociações!');\r\n            };\r\n        });\r\n    }\r\n\r\n    apagaTodos(){\r\n        return new Promise((resolve, reject)=> {\r\n            let request = this._connection\r\n                .transaction(['negociacoes'], 'readwrite')\r\n                .objectStore('negociacoes')\r\n                .clear();\r\n            \r\n                request.onsuccess = e => resolve('Negociações removidas com sucesso!');\r\n                \r\n                request.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject('Não foi possível remover as negociações');\r\n                }\r\n\r\n        });\r\n    }\r\n}"]}