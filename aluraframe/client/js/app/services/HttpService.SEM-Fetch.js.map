{"version":3,"sources":["../../app-es6/services/HttpService.SEM-Fetch.js"],"names":["HttpService","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","console","log","send","dado","setRequestHeader","stringify"],"mappings":";;;;;;IACMA,W;;;;;;;4BAEEC,G,EAAK;;AAEL,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACnC;AACD;AACA,oBAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,oBAAIE,IAAJ,CAAS,KAAT,EAAgBN,GAAhB;;AAEA;AACAI,oBAAIG,kBAAJ,GAAyB,YAAM;AAC1B;AACD;AACA,wBAAGH,IAAII,UAAJ,IAAkB,CAArB,EAAwB;AACpB,4BAAGJ,IAAIK,MAAJ,IAAc,GAAjB,EAAsB;AAClB;AACA;AACA;AACAP,oCAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;;AAEE;AACF;AACH,yBARD,MAQK;AACDC,oCAAQC,GAAR,CAAYV,IAAIQ,YAAhB;AACAT,mCAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,iBAjBD;;AAmBAR,oBAAIW,IAAJ;AACA;;;;;;;AAOH,aAlCM,CAAP;AAoCH;;;6BAGIf,G,EAAKgB,I,EAAM;;AAEZ,mBAAO,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,oBAAIE,IAAJ,CAAS,MAAT,EAAiBN,GAAjB,EAAsB,IAAtB;AACAI,oBAAIa,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAb,oBAAIG,kBAAJ,GAAyB,YAAM;;AAE3B,wBAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;AACrB,4BAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;AACnBP,oCAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AACH,yBAFD,MAEO;AACHT,mCAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,iBATD;AAUAR,oBAAIW,IAAJ,CAASL,KAAKQ,SAAL,CAAeF,IAAf,CAAT,EAfoC,CAeJ;AACnC,aAhBM,CAAP;AAkBH","file":"HttpService.SEM-Fetch.js","sourcesContent":["\r\nclass HttpService {\r\n\r\n    get(url) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n             //    alert('Importando negociações');\r\n            //Não estamos usando jQuery, usaremos JS Puro\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', url);\r\n\r\n            // Configurações\r\n            xhr.onreadystatechange = () => {\r\n                 // Precisa testar o status 200 \r\n                // Porque um erro é uma resposta válida\r\n                if(xhr.readyState == 4) {\r\n                    if(xhr.status == 200) {\r\n                        // JSON.parse - converte Texto num Objeto JS  \r\n                        // Para cada objeto converte para um instancia de negociacao\r\n                        // No novo array ( map ) vc percorre e adiciona \r\n                        resolve(JSON.parse(xhr.responseText));\r\n\r\n                          // O Service não deve ter contato com a View\r\n                        // this._mensagem.texto = 'Negociações importadas da semana'; \r\n                    }else{\r\n                        console.log(xhr.responseText);\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n\r\n            xhr.send();\r\n            /* Estados Possíveis de uma requisição AJAX\r\n                0: requisição ainda não iniciada\r\n                1: conexão com o servidor estabelecida\r\n                2: requisição recebida\r\n                3: processando requisição\r\n                4: requisição está concluída e a resposta está pronta\r\n            */\r\n        });\r\n\r\n    }\r\n\r\n\r\n    post(url, dado) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n                    if (xhr.status == 200) {\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n        });\r\n\r\n    }\r\n}"]}