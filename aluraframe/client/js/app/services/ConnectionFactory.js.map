{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;AAEA;;IACaC,iB,WAAAA,iB;AAET,iCAAc;AAAA;;AACV,cAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;wCAEsB;;AAEnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,aAAK;AAC/BT,sCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAwB,aAAK;AACzB;AACA,wBAAI,CAAChB,UAAL,EAAiB;AACbA,qCAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEA;AACAd,gCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAY;AAC3B,kCAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,yBAFD;AAGH;AACDE,4BAAQL,UAAR;AACH,iBAZD;;AAcAO,4BAAYW,OAAZ,GAAsB,aAAK;AACvBC,4BAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAHD;AAIH,aA1BM,CAAP;AA2BH;;;sCAEoBtB,U,EAAY;AAC7B;AACAH,mBAAO0B,OAAP,CAAe,iBAAS;AACpB,oBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,2BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC;AAChCG,mCAAe;AADiB,iBAApC;AAGH,aAPD;AASH;;;0CAEwB;AACrB,gBAAI7B,UAAJ,EAAgB;AACZC;AACAD,6BAAa,IAAb;AACH;AACJ;;;;;;AAGL","file":"ConnectionFactory.js","sourcesContent":["// Agora não precisa de var Connection\n// POrque agora será um Módulo JS\n\n\n// var ConnectionFactory = (function () {\n// Essa conversão da Classe numa Função Anônima e retornando variáveis \n// e um Classe é um Padrão de Projeto chamado Module\n// A variável ConnectionFactory tem um escopo global, mas o restante não\n\nconst stores = ['negociacoes'];\nconst version = 4;\nconst dbName = 'aluraframe';\n\nlet connection = null;\nlet close = null;\n\n// return class ConnectionFactory {\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            };\n\n            openRequest.onsuccess = e => {\n                //0, \"\", null, undefined .. tudo isso é Falso\n                if (!connection) {\n                    connection = e.target.result;\n\n                    // Monkey Patch\n                    close = connection.close.bind(connection);\n                    connection.close = function () {\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    };\n                }\n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static _createStores(connection) {\n        //criando novas stores\n        stores.forEach(store => {\n            if (connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, {\n                autoIncrement: true\n            });\n        });\n\n    }\n\n    static closeConnection() {\n        if (connection) {\n            close();\n            connection = null;\n        }\n    }\n}\n\n// }) (); // Função AutoInvocada"]}