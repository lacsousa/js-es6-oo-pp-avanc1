{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAGCC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB;AACA,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEA;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAZD;;AAcAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBA1BM,CAAP;AA2BH;;;kDAEoBtB,U,EAAY;AAC7B;AACAH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC;AAChCG,+CAAe;AADiB,6BAApC;AAGH,yBAPD;AASH;;;sDAEwB;AACrB,4BAAI7B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["// Agora não precisa de var Connection\n// POrque agora será um Módulo JS\n\n\n// var ConnectionFactory = (function () {\n// Essa conversão da Classe numa Função Anônima e retornando variáveis \n// e um Classe é um Padrão de Projeto chamado Module\n// A variável ConnectionFactory tem um escopo global, mas o restante não\n\nconst stores = ['negociacoes'];\nconst version = 4;\nconst dbName = 'aluraframe';\n\nlet connection = null;\nlet close = null;\n\n// return class ConnectionFactory {\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            };\n\n            openRequest.onsuccess = e => {\n                //0, \"\", null, undefined .. tudo isso é Falso\n                if (!connection) {\n                    connection = e.target.result;\n\n                    // Monkey Patch\n                    close = connection.close.bind(connection);\n                    connection.close = function () {\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    };\n                }\n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static _createStores(connection) {\n        //criando novas stores\n        stores.forEach(store => {\n            if (connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, {\n                autoIncrement: true\n            });\n        });\n\n    }\n\n    static closeConnection() {\n        if (connection) {\n            close();\n            connection = null;\n        }\n    }\n}\n\n// }) (); // Função AutoInvocada"]}