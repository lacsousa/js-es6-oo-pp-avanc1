{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_httpService","get","then","console","log","negociacoes","map","Date","objeto","data","quantidade","valor","catch","erro","Error","Promise","resolve","reject","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","getConnection","conexao","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoService {\n\n    constructor() {\n        this._httpService = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n\n        // Outra forma de implementação\n        // Sem criar uma nova Promise, já que HttpService já cria uma e repassa para NegociacaoService\n        // return new Promise((resolve, reject) => {\n        return this._httpService\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                // resolve(negociacoes\n                // .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                // reject('Não foi possível obter as Negociações da semana');\n                throw new Error('Não foi possível obter as Negociações da semana');\n            });\n        // });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n        return new Promise((resolve, reject) => {\n\n            this._httpService\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    resolve(negociacoes\n                        .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as Negociações da semana anterior');\n                });\n        });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n        return new Promise((resolve, reject) => {\n\n            this._httpService\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    resolve(negociacoes\n                        .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as Negociações da semana retrasada');\n                });\n        });\n    }\n\n\n    obterNegociacoes() {\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n\n        }).catch(erro => {\n            console.log(erro);\n            throw new Error(erro);\n        });\n\n    }\n\n    cadastra(negociacao) {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => \"Negociação adiconada com sucesso!\")\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível adicionar a negociação!\");\n            });\n    }\n\n    lista() {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível listar todas as negociações!');\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso!')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações!');\n            });\n    }\n\n    importa(listaAtual) {\n        // Trabalhando com o Promise\n        return this.obterNegociacoes()\n            //filter - filtra o resultado do que será disponibilizado depois\n            // critério para um Array\n            .then(negociacoes => negociacoes.filter(negociacao =>\n                !listaAtual.some(negociacaoExistente =>\n                    JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))))\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível buscar as negociações!');\n            });\n    }\n}"]}