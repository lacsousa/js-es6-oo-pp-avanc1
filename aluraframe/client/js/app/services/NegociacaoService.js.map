{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_httpService","HttpService","get","then","console","log","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","erro","Error","Promise","resolve","reject","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._httpService = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n        // Outra forma de implementação\r\n        // Sem criar uma nova Promise, já que HttpService já cria uma e repassa para NegociacaoService\r\n        // return new Promise((resolve, reject) => {\r\n        return this._httpService\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                // resolve(negociacoes\r\n                // .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                console.log(negociacoes);\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                // reject('Não foi possível obter as Negociações da semana');\r\n                throw new Error('Não foi possível obter as Negociações da semana');\r\n            });\r\n        // });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._httpService\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes\r\n                        .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as Negociações da semana anterior');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._httpService\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes\r\n                        .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as Negociações da semana retrasada');\r\n                });\r\n        });\r\n    }\r\n\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            console.log(erro);\r\n            throw new Error(erro);\r\n        });\r\n\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => \"Negociação adiconada com sucesso!\")\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error(\"Não foi possível adicionar a negociação!\");\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível listar todas as negociações!');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso!')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações!');\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        // Trabalhando com o Promise\r\n        return this.obterNegociacoes()\r\n            //filter - filtra o resultado do que será disponibilizado depois\r\n            // critério para um Array\r\n            .then(negociacoes => negociacoes.filter(negociacao =>\r\n                !listaAtual.some(negociacaoExistente =>\r\n                    JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))))\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível buscar as negociações!');\r\n            });\r\n    }\r\n}"]}